#!/bin/sh
# shellcheck disable=SC1007,SC3043 # empty assignments and local usage
#
# make_codecov.sh - Generate Codecov configuration for monorepo coverage
#
# This script generates two files needed for Codecov integration:
# 1. codecov.yml - Configuration file with flags for each module
# 2. codecov.txt - File mapping coverage files to module flags
#
# The generated configuration uses Codecov's flag management feature
# to track coverage for each module separately in a monorepo setup.
#
# Usage: make_codecov.sh [index_file] [coverage_dir]
#
# Arguments:
#   index_file   - Path to the index file containing module information
#                  (default: .tmp/index)
#   coverage_dir - Directory containing coverage files
#                  (default: .coverage)
#
# Output files:
#   ${coverage_dir}/codecov.yml - Codecov configuration
#   ${coverage_dir}/codecov.sh - Upload script for CI

set -eu

INDEX="${1:-.tmp/index}"
COVERAGE_DIR="${2:-.coverage}"

# Function to generate codecov.yml content to stdout
generate_codecov_yml() {
	local index="$1"

	cat <<EOF
# Generated by $0 - DO NOT EDIT
# This file defines coverage flags for each module in the monorepo

# Use automatic flag management for better monorepo support
flag_management:
  default_rules:
    carryforward: true
    statuses:
      - type: project
        target: auto
        threshold: 1%

  individual_flags:
EOF

	# Add each module as an individual flag
	# shellcheck disable=SC2094 # $index is only read.
	while IFS=: read -r name dir _rest; do
		[ -n "$name" ] || continue

		if [ "$dir" = "." ]; then
			# Root module - includes everything except the submodules
			cat <<EOF
    - name: ${name}
      paths:
        - "./"
EOF
			# Exclude all subdirectories from root module
			while IFS=: read -r _name subdir _rest2; do
				if [ "$subdir" != "." ] && [ -n "$subdir" ]; then
					cat <<EOF
        - "!${subdir}/"
EOF
				fi
			done < "$index"

			cat <<EOF
      statuses:
        - type: project
          target: 80%
          threshold: 1%
EOF
		else
			# Subproject module
			cat <<EOF
    - name: ${name}
      paths:
        - "${dir}/"
      statuses:
        - type: project
          target: 80%
          threshold: 1%
EOF
		fi
	done < "$index"

	# Add comment configuration for PR feedback
	cat <<'EOF'

# PR comment configuration
comment:
  layout: "header, diff, flags, components, tree, footer"
  behavior: default
  require_changes: false
  require_base: true
  require_head: true
EOF
}


# Function to generate upload script for CI
generate_upload_script() {
	local index="$1"
	local n=1 name= file=

	cat <<'EOF'
#!/bin/sh
# Generated by make_codecov.sh - DO NOT EDIT
# This script uploads each coverage file to Codecov with its module flag

set -e

# Get the directory where this script is located
SCRIPT_DIR="$(dirname "$0")"

# Download codecov CLI with integrity check
CODECOV_BIN="${SCRIPT_DIR}/codecov"
if [ ! -f "$CODECOV_BIN" ]; then
	echo "Downloading codecov CLI..."
	curl -o "${CODECOV_BIN}" -s https://cli.codecov.io/latest/linux/codecov
	curl -o "${CODECOV_BIN}.SHA256SUM" -s https://cli.codecov.io/latest/linux/codecov.SHA256SUM
	curl -o "${CODECOV_BIN}.SHA256SUM.sig" -s https://cli.codecov.io/latest/linux/codecov.SHA256SUM.sig

	# Verify checksum
	if command -v sha256sum >/dev/null 2>&1; then
		echo "Verifying codecov checksum..."
		(cd "$SCRIPT_DIR" && sha256sum -c codecov.SHA256SUM) || {
			echo "Error: Codecov checksum verification failed" >&2
			rm -f "$CODECOV_BIN" "${CODECOV_BIN}.SHA256SUM" "${CODECOV_BIN}.SHA256SUM.sig"
			exit 1
		}
	else
		echo "Warning: sha256sum not found, skipping integrity check" >&2
	fi

	chmod +x "$CODECOV_BIN"
	# Clean up verification files
	rm -f "${CODECOV_BIN}.SHA256SUM" "${CODECOV_BIN}.SHA256SUM.sig"
fi

# Upload each coverage file with its flag
EOF

	for name in $(cut -d: -f1 "$INDEX" | tr '\n' ' '); do
		[ -n "$name" ] || continue
		file="\${SCRIPT_DIR}/coverage_${n}_${name}.prof"
		cat <<EOF

echo "::group::Upload coverage for $name"
if [ -s "$file" ]; then
	"\$CODECOV_BIN" upload-process \\
		--disable-search \\
		--file "$file" \\
		--flag "$name" \\
		--codecov-yml-path "\${SCRIPT_DIR}/codecov.yml" || {
		echo "Warning: Failed to upload coverage for $name"
	}
else
	echo "Warning: Coverage file not found for $name"
fi
echo "::endgroup::"
EOF
		n=$((n + 1))
	done

	cat <<'EOF'

# Clean up
rm -f "$CODECOV_BIN"
EOF
}

if [ ! -s "$INDEX" ]; then
	echo "Error: Index file not found: $INDEX" >&2
	echo "Run 'make .tmp/index' first" >&2
	exit 1
fi

# Create coverage directory
mkdir -p "$COVERAGE_DIR"

# Generate codecov.yml with flags for each module
echo "Generating codecov.yml..."
generate_codecov_yml "$INDEX" > "$COVERAGE_DIR/codecov.yml"

echo "Generating codecov.sh..."
generate_upload_script "$INDEX" > "$COVERAGE_DIR/codecov.sh"
chmod +x "$COVERAGE_DIR/codecov.sh"
