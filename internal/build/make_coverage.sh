#!/bin/sh
# make_coverage.sh - Execute coverage tests directly from .tmp/index
#
# Usage: make_coverage.sh [index_file] [coverage_dir]

set -eu

INDEX="${1:-.tmp/index}"
COVERAGE_DIR="${2:-.coverage}"

if [ ! -f "$INDEX" ]; then
	echo "Error: Index file not found: $INDEX" >&2
	echo "Run 'make .tmp/index' first" >&2
	exit 1
fi

# Create coverage directory
mkdir -p "$COVERAGE_DIR"

# Generate codecov.yml with flags for each module
echo "Generating codecov.yml..."
mkdir -p "$COVERAGE_DIR"
cat > "$COVERAGE_DIR/codecov.yml" <<'EOF'
# Generated by make_coverage.sh - DO NOT EDIT
# This file defines coverage flags for each module in the monorepo

coverage:
  # Disable the default project status check
  status:
    project:
      default: off

# Use automatic flag management for better monorepo support
flag_management:
  default_rules:
    carryforward: true
    statuses:
      - type: project
        target: auto
        threshold: 1%

  individual_flags:
EOF

# Add each module as an individual flag
# shellcheck disable=SC2013
for name in $(cut -d: -f1 "$INDEX"); do
	[ -z "$name" ] && continue

	dir=$(grep "^${name}:" "$INDEX" | cut -d: -f2)
	if [ "$dir" = "." ]; then
		# Root module
		cat >> "$COVERAGE_DIR/codecov.yml" <<EOF
    - name: ${name}
      paths:
        - "*.go"
        - "!**/*_test.go"
        - "!handlers/"
        - "!internal/"
      statuses:
        - type: project
          target: 80%
          threshold: 1%
EOF
	else
		# Handler module
		cat >> "$COVERAGE_DIR/codecov.yml" <<EOF
    - name: ${name}
      paths:
        - "${dir}/"
      statuses:
        - type: project
          target: 80%
          threshold: 1%
EOF
	fi
done

# Add comment configuration for PR feedback
cat >> "$COVERAGE_DIR/codecov.yml" <<'EOF'

# PR comment configuration
comment:
  layout: "header, diff, flags, components, tree, footer"
  behavior: default
  require_changes: false
  require_base: true
  require_head: true
EOF

# Run tests for each module using make targets
echo "Running coverage tests..."
n=1
failed=0
# shellcheck disable=SC2013
for name in $(cut -d: -f1 "$INDEX"); do
	[ -z "$name" ] && continue

	COVERPROFILE="$COVERAGE_DIR/coverage_${n}_${name}.out"
	if ! make "test-${name}" \
		"GOTEST_FLAGS=${GOTEST_FLAGS:+$GOTEST_FLAGS }-coverprofile=$COVERPROFILE"; then
		echo "⚠️  ${name} tests failed" >&2
		failed=1
	fi

	n=$((n + 1))
done

# Merge coverage files
echo
echo "Merging coverage files..."
set -- "$COVERAGE_DIR"/coverage_*.out

if [ $# -eq 0 ]; then
	echo "No coverage files found" >&2
	exit 1
fi

if command -v gocovmerge >/dev/null 2>&1; then
	echo "Using gocovmerge..."
	gocovmerge "$@" > "$COVERAGE_DIR/coverage.out"
else
	echo "Manual merge (no gocovmerge found)..."
	# Manual merge
	head -1 "$1" > "$COVERAGE_DIR/coverage.out"
	for f; do
		tail -n +2 "$f" >> "$COVERAGE_DIR/coverage.out"
	done
fi

# Show summary
echo
echo "Coverage summary:"
${GO:-go} tool cover -func="$COVERAGE_DIR/coverage.out" | tail -1

# Optional: generate HTML report
if [ "${COVERAGE_HTML:-}" = "true" ]; then
	echo
	echo "Generating HTML coverage report..."
	${GO:-go} tool cover -html="$COVERAGE_DIR/coverage.out" -o "$COVERAGE_DIR/coverage.html"
	echo "HTML report saved to $COVERAGE_DIR/coverage.html"
fi

# Exit with failure if any tests failed
if [ "$failed" -ne 0 ]; then
	echo "Some tests failed" >&2
	exit 1
fi

echo
echo "codecov.yml generated successfully at $COVERAGE_DIR/codecov.yml"

# Generate codecov.sh upload script
echo "Generating codecov.sh..."
cat > "$COVERAGE_DIR/codecov.sh" <<'EOF'
#!/bin/sh
# Generated by make_coverage.sh - DO NOT EDIT
# This script uploads all coverage reports to Codecov in bulk
# Codecov will use codecov.yml to map files to appropriate flags

set -eu

COVERAGE_DIR="${1:-.coverage}"

if [ ! -d "$COVERAGE_DIR" ]; then
	echo "Error: Coverage directory not found: $COVERAGE_DIR" >&2
	exit 1
fi

echo "Uploading coverage reports to Codecov..."

# Count coverage files
coverage_files=$(find "$COVERAGE_DIR" -name "coverage_*.out" -type f | wc -l)
if [ "$coverage_files" -eq 0 ]; then
	echo "Error: No coverage files found in $COVERAGE_DIR" >&2
	exit 1
fi

echo "Found $coverage_files coverage files"

# Upload all coverage files at once
# Codecov will use the paths defined in codecov.yml to assign appropriate flags
if [ -n "${GITHUB_ACTIONS:-}" ]; then
	echo "Running in GitHub Actions environment"
	# Use codecov bash uploader with glob pattern
	curl -s https://codecov.io/bash | bash -s -- \
		-f "$COVERAGE_DIR/coverage_*.out" \
		-y "$COVERAGE_DIR/codecov.yml" \
		-n "slog-monorepo" \
		|| { echo "Error: Coverage upload failed" >&2; exit 1; }
else
	# Local upload using codecov CLI
	if command -v codecov >/dev/null 2>&1; then
		codecov \
			--file "$COVERAGE_DIR/coverage_*.out" \
			--yml "$COVERAGE_DIR/codecov.yml" \
			--name "slog-monorepo" \
			|| { echo "Error: Coverage upload failed" >&2; exit 1; }
	else
		echo "Error: codecov CLI not found. Install it or run in CI environment" >&2
		exit 1
	fi
fi

echo "Coverage upload completed successfully!"
echo "Codecov will process the files according to the flags defined in codecov.yml"
EOF

chmod +x "$COVERAGE_DIR/codecov.sh"

echo "codecov.sh generated successfully at $COVERAGE_DIR/codecov.sh"
echo "Usage: $COVERAGE_DIR/codecov.sh [coverage_dir]"
