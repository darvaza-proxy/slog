#!/bin/sh
# shellcheck disable=SC1007,SC3043 # empty assignments and local usage
#
# make_coverage.sh - Execute coverage tests directly from .tmp/index
#
# Usage: make_coverage.sh [index_file] [coverage_dir]

set -eu

INDEX="${1:-.tmp/index}"
COVERAGE_DIR="${2:-.coverage}"

# Function to generate codecov.yml content to stdout
generate_codecov_yml() {
	local index="$1"

	cat <<EOF
# Generated by $0 - DO NOT EDIT
# This file defines coverage flags for each module in the monorepo

# Use automatic flag management for better monorepo support
flag_management:
  default_rules:
    carryforward: true
    statuses:
      - type: project
        target: auto
        threshold: 1%

  individual_flags:
EOF

	# Add each module as an individual flag
	# shellcheck disable=SC2094 # $index is only read.
	while IFS=: read -r name dir _rest; do
		[ -z "$name" ] && continue

		if [ "$dir" = "." ]; then
			# Root module - includes everything except the submodules
			cat <<EOF
    - name: ${name}
      paths:
        - "./"
EOF
			for subdir in $(cut -d: -f2 "$index" | tr '\n' ' '); do
				if [ "$subdir" != "." ]; then
					cat <<EOF
        - "!${subdir}/"
EOF
				fi
			done

			cat <<EOF
      statuses:
        - type: project
          target: 80%
          threshold: 1%
EOF
		else
			# Subproject module
			cat <<EOF
    - name: ${name}
      paths:
        - "${dir}/"
      statuses:
        - type: project
          target: 80%
          threshold: 1%
EOF
		fi
	done < "$index"

	# Add comment configuration for PR feedback
	cat <<'EOF'

# PR comment configuration
comment:
  layout: "header, diff, flags, components, tree, footer"
  behavior: default
  require_changes: false
  require_base: true
  require_head: true
EOF
}

if [ ! -f "$INDEX" ]; then
	echo "Error: Index file not found: $INDEX" >&2
	echo "Run 'make .tmp/index' first" >&2
	exit 1
fi

# Create coverage directory
mkdir -p "$COVERAGE_DIR"

# Generate codecov.yml with flags for each module
echo "Generating codecov.yml..."
generate_codecov_yml "$INDEX" > "$COVERAGE_DIR/codecov.yml"

# Run tests for each module using make targets
echo "Running coverage tests..."
n=1
failed=0
while IFS=: read -r name dir _rest; do
	[ -z "$name" ] && continue

	COVERPROFILE="$COVERAGE_DIR/coverage_${n}_${name}.out"
	if ! make "test-${name}" \
		"GOTEST_FLAGS=${GOTEST_FLAGS:+$GOTEST_FLAGS }-coverprofile=$COVERPROFILE"; then
		echo "⚠️  ${name} tests failed" >&2
		failed=1
	fi

	n=$((n + 1))
done < "$INDEX"

# Merge coverage files
echo
echo "Merging coverage files..."
set -- "$COVERAGE_DIR"/coverage_*.out

if [ $# -eq 0 ]; then
	echo "No coverage files found" >&2
	exit 1
fi

if command -v gocovmerge >/dev/null 2>&1; then
	echo "Using gocovmerge..."
	gocovmerge "$@" > "$COVERAGE_DIR/coverage.out"
else
	echo "Manual merge (no gocovmerge found)..."
	# Manual merge
	head -1 "$1" > "$COVERAGE_DIR/coverage.out"
	for f; do
		tail -n +2 "$f" >> "$COVERAGE_DIR/coverage.out"
	done
fi

# Show summary
echo
echo "Coverage summary:"
${GO:-go} tool cover -func="$COVERAGE_DIR/coverage.out" | tail -1

# Optional: generate HTML report
if [ "${COVERAGE_HTML:-}" = "true" ]; then
	echo
	echo "Generating HTML coverage report..."
	${GO:-go} tool cover -html="$COVERAGE_DIR/coverage.out" -o "$COVERAGE_DIR/coverage.html"
	echo "HTML report saved to $COVERAGE_DIR/coverage.html"
fi

# Exit with failure if any tests failed
if [ "$failed" -ne 0 ]; then
	echo "Some tests failed" >&2
	exit 1
fi
